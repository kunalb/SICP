(define (no-op) ())

(define (make-tree key-ops) 
  (let ((data ())
        (key ())
        (left-branch ())
        (right-branch ())
        (op-count (length key-ops)))
    (let ((key-eq? (if (> op-count 0) (car key-ops) =))
          (key-lt? (if (> op-count 1) (cadr key-ops) <)))
      (define (add! new-key new-data) 
        (cond ((or (null? key) (key-eq? key new-key))
               (set! key new-key)
               (set! data new-data))
              ((key-lt? key new-key) 
               (if (null? right-branch) (set! right-branch (make-tree key-ops)))
               ((right-branch `add!) new-key new-data))
              (else 
               (if (null? left-branch) (set! left-branch (make-tree key-ops)))
               ((left-branch `add!) new-key new-data))))
      (define (lookup check-key) 
        (cond ((null? key) ())
              ((key-eq? key check-key) data)
              ((key-lt? key check-key) 
               (if (null? right-branch) 
                   ()
                   ((right-branch `lookup) check-key)))
              (else
               (if (null? left-branch) 
                   ()
                   ((left-branch `lookup) check-key)))))
      (define (delete! key) ())
      (lambda (op)
        (cond ((eq? op `add!) add!)
              ((eq? op `lookup) lookup)
              ((eq? op `delete) delete!)
              (else (error "Unknown operation" op)))))))

(define tree (make-tree `()))
((tree `add!) 0 "Alpha")
((tree `add!) 3 "Beta")
((tree `add!) 2 "Theta")
((tree `add!) 5 "Gamma")
((tree `add!) 4 "Test")

((tree `lookup) 4)

